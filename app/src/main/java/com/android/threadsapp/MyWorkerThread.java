package com.android.threadsapp;

import java.util.LinkedList;

/**
 * MyWorkerThread extends Thread - расширяем обычный Thread
 */
public class MyWorkerThread extends Thread {

    private final LinkedList<Runnable> queue = new LinkedList<Runnable>();//некая очередь

    /**
     * После выполнения работы в методе run(), данный поток умирает и его повторно вызвать нельзя.
     * Можно в данном методе запустить бесконечный цыкл, и завершать его по изменению условия.
     */

    // запускаем бесконечный процесс и кладем туда какуюту работу.
    @Override
    public void run() {
        while (!Thread.interrupted()) {// бесконечно будет выполнятся работа
            Runnable currentRunnable;

            synchronized (queue) {//способ синхранизировать кусочек кода.
                if (queue.isEmpty()) {
                    try {
                        Thread.currentThread().wait();//(режим ожидания) приостанавливаем выполнение кода в этой секции пока не придут новые данные
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
                currentRunnable = queue.get(0);//берем первый элемент и запускаем его
                queue.remove(0);// далее удаляем элемент
            }
            currentRunnable.run();//пока выполняется run() мы можем делать все остальные методы
        }
    }

    /**
     * Если у нас несколько потоков и они кидают результаты на главный поток, то есть вероятность,
     * что в какойто момент у нас поломается очередь выполнения работ (получение результатов.
     * Что-бы этого не произошло добавляем в метод -> synchronized
     * synchronized - это делает метод защищенным от одновременного входа нескольких потоков
     * (синхронный заход потоков в конкретный метод).
     * <p>
     * Можно синхранизировать объект (и так нужно делать) по очереди - > synchronized (queue){....
     * это значит что мы синхранизируем не по коду, а по конкретному объеку. То-есть симофором,
     * объектом по которому будет происходить синхранизация будет объект queue.
     * Если мы не укажем что мы синхранизируемся по объект queue, а просто укажем метод,
     * то симофором будет весь Thread (поток, класс).
     */
    public synchronized void post(Runnable runnable) {
        synchronized (queue) {
            queue.notify();// это будет будить выполнение кода (секция которая в режиме ожидания -> Thread.currentThread().wait();)
            queue.add(runnable);//кладем в очередь дополнительную задачу
        }
    }

    /**
     * Можно сделать множесто синхранизирующих методов.
     * Метод removeAll() будет синхранизирован.
     * То-есть одновременно не могут выполнятся методы post() и removeAll()
     * В приведенном примере, синхронизация происходит по всему Thread сразу.
     * <p>
     * Если сделать синхронизацию по секции (объекту) -> synchronized (queue)
     * то в данном случае они будут синхранизироватся по совершенно разным объектам и можно допустить
     * одновременное попадания в оба метода.
     * <p>
     * Синхронизация нужна для того чтобы обезопасить очередь, чтобы ее не поломать.
     */

    private synchronized void removeAll() {
        synchronized (queue) {
            queue.clear();
        }
    }

    /**
     * Недостаток синхронизации методов.
     * Методы post() и removeAll() не могут выполнится одновременно, но у нас есть бесконечный метод
     * run() и добавить слово synchronized в него нельзя, так как мы один раз зайдем в него и заблокируем
     * все приложение, условие не выполнится (оно постоянно будет работать в фоне) и остальные методы
     * никогда не вызывутся.
     * Выход только один, синхранизировать только секцию, синхронизировать только конкретную операцию.
     */
}
